/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package finalproject;

import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.Random;
import sun.audio.*;

/**
 *
 * @author CR3Desktop
 */
public class FinalProject extends javax.swing.JFrame {

    /**
     * Creates new form FinalProject
     */
    public FinalProject() {
        initComponents();
        
        //Default values, setting things to not visible
        rockButton.setVisible(false);
        paperButton.setVisible(false);
        scissorsButton.setVisible(false);
        rockLabel.setVisible(false);
        paperLabel.setVisible(false);
        scissorsLabel.setVisible(false);
        keepPlayingLabel.setVisible(false);
        yesKeepPlaying.setVisible(false);
        noKeepPlaying.setVisible(false);
        outcomeOfGame.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        player1Face = new javax.swing.JLabel();
        player2Face = new javax.swing.JLabel();
        player1Name = new javax.swing.JLabel();
        player2Name = new javax.swing.JLabel();
        wins = new javax.swing.JLabel();
        player1Wins = new javax.swing.JLabel();
        player2Wins = new javax.swing.JLabel();
        rockButton = new javax.swing.JButton();
        paperButton = new javax.swing.JButton();
        scissorsButton = new javax.swing.JButton();
        rockLabel = new javax.swing.JLabel();
        paperLabel = new javax.swing.JLabel();
        scissorsLabel = new javax.swing.JLabel();
        numOfGames = new javax.swing.JComboBox();
        numOfGamesLabel = new javax.swing.JLabel();
        gamesPlayedLabel = new javax.swing.JLabel();
        gamesPlayed = new javax.swing.JLabel();
        keepPlayingLabel = new javax.swing.JLabel();
        yesKeepPlaying = new javax.swing.JButton();
        noKeepPlaying = new javax.swing.JButton();
        startPlaying = new javax.swing.JButton();
        outcomeOfGame = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rock, Paper, Scissors Game");

        player1Face.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/neutral-face.png"))); // NOI18N
        player1Face.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                player1FaceMouseEntered(evt);
            }
        });

        player2Face.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/neutral-face.png"))); // NOI18N
        player2Face.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                player2FaceMouseEntered(evt);
            }
        });

        player1Name.setText("Player 1");
        player1Name.setPreferredSize(new java.awt.Dimension(40, 14));

        player2Name.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        player2Name.setText("CPU");
        player2Name.setPreferredSize(new java.awt.Dimension(40, 14));

        wins.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wins.setText("Wins");
        wins.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        player1Wins.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        player1Wins.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player1Wins.setText(Integer.toString(player1WinTotal));

        player2Wins.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        player2Wins.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player2Wins.setText(Integer.toString(player2WinTotal));

        rockButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rock.png"))); // NOI18N
        rockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rockButtonActionPerformed(evt);
            }
        });

        paperButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/paper.png"))); // NOI18N
        paperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperButtonActionPerformed(evt);
            }
        });

        scissorsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/scissors.png"))); // NOI18N
        scissorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scissorsButtonActionPerformed(evt);
            }
        });

        rockLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rockLabel.setText("Rock");

        paperLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        paperLabel.setText("Paper");

        scissorsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scissorsLabel.setText("Scissors");

        numOfGames.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Infinite Games", "5 Games", "1 Game" }));

        numOfGamesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        numOfGamesLabel.setText("How many games to play?");

        gamesPlayedLabel.setText("Games Played");

        gamesPlayed.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        gamesPlayed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gamesPlayed.setText(Integer.toString(gameAmount));

        keepPlayingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        keepPlayingLabel.setText("Keep playing?");

        yesKeepPlaying.setText("Yes");
        yesKeepPlaying.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesKeepPlayingActionPerformed(evt);
            }
        });

        noKeepPlaying.setText("No");
        noKeepPlaying.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noKeepPlayingActionPerformed(evt);
            }
        });

        startPlaying.setText("Start");
        startPlaying.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPlayingActionPerformed(evt);
            }
        });

        outcomeOfGame.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        outcomeOfGame.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(rockLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rockButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(paperButton)
                                    .addComponent(paperLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scissorsButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(scissorsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(numOfGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startPlaying))
                                    .addComponent(numOfGamesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(yesKeepPlaying)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(noKeepPlaying))
                                    .addComponent(keepPlayingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gamesPlayed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gamesPlayedLabel, javax.swing.GroupLayout.Alignment.TRAILING)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(player1Face)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(player1Name, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wins, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(player2Name, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(player1Wins, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(player2Wins, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(player2Face)))
                .addGap(0, 10, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outcomeOfGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(player1Face)
                    .addComponent(player2Face)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(player2Name, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(player1Name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(wins, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player1Wins, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(player2Wins, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outcomeOfGame, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(rockButton)
                        .addComponent(paperButton))
                    .addComponent(scissorsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rockLabel)
                    .addComponent(paperLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scissorsLabel))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numOfGamesLabel)
                    .addComponent(keepPlayingLabel)
                    .addComponent(gamesPlayedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(numOfGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startPlaying)
                        .addComponent(gamesPlayed))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(noKeepPlaying)
                        .addComponent(yesKeepPlaying)))
                .addContainerGap())
        );

        player2Name.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startPlayingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPlayingActionPerformed
        // TODO add your handling code here:
        //Setting variables back to default values
        gameAmountTotal = 0; //The total amount of games being played. Selected via the combobox with Infinite Games, 5 Games, 1 Game option
        gameAmount = 0; //The amount of games played yet
        player1WinTotal = 0; //The amount of wins for player1
        player2WinTotal = 0; //The amount of wins for player2
        
        //Set keep playing to non visible
        keepPlayingLabel.setVisible(false);
        yesKeepPlaying.setVisible(false);
        noKeepPlaying.setVisible(false);
        
        //Setting labels with appropriate text
        gamesPlayed.setText(Integer.toString(gameAmount));
        player1Wins.setText(Integer.toString(player1WinTotal));
        player2Wins.setText(Integer.toString(player2WinTotal));
        
        //Gets the string value for what the user selects for number of games
        String localNumOfGames = numOfGames.getSelectedItem().toString();
                
        //Setting gameAmountTotal to what the user selects
        switch (localNumOfGames){
            case "1 Game":
                gameAmountTotal = 1;
                break;
            case "5 Games":
                gameAmountTotal = 5;
                break;
            default:
                gameAmountTotal = 0;
                break;
        }
        
        //Run these two functions
        startGames(); //Sets buttons and labels to visible
        tieGame(); //Set icons to neutral faces, and set the FaceInts to 0 for audio
    }//GEN-LAST:event_startPlayingActionPerformed

    //What happens with the Rock Button is pressed
    private void rockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rockButtonActionPerformed
        // TODO add your handling code here:
        //Set player1Choice to 0 for Rock, run determineWinner function with player1Choice
        player1Choice = 0;
        determineWinner(player1Choice); //Finds the winner
    }//GEN-LAST:event_rockButtonActionPerformed

    //What happens with the Paper Button is pressed
    private void paperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperButtonActionPerformed
        // TODO add your handling code here:
        //Set player1Choice to 1 for paper, run determineWinner function with player1Choice
        player1Choice = 1;
        determineWinner(player1Choice);
    }//GEN-LAST:event_paperButtonActionPerformed

    //What happens with the Scissor Button is pressed
    private void scissorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scissorsButtonActionPerformed
        // TODO add your handling code here:
        //Set player1Choice to 2 for scissors, run determineWinner function with player1Choice
        player1Choice = 2;
        determineWinner(player1Choice);
    }//GEN-LAST:event_scissorsButtonActionPerformed

    //Yes the user wants to keep playing
    private void yesKeepPlayingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesKeepPlayingActionPerformed
        // TODO add your handling code here:
        startGames(); //Sets buttons and labels to visible
    }//GEN-LAST:event_yesKeepPlayingActionPerformed

    //No the user does not want to keep playing
    private void noKeepPlayingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noKeepPlayingActionPerformed
        // TODO add your handling code here:
        //Set output to blank, run finishGames()
        output = "";
        finishGames(); //Sets buttons and labels to non visible, displays an output string
    }//GEN-LAST:event_noKeepPlayingActionPerformed

    //Plays audio when mouse enters P1FaceIcon
    private void player1FaceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_player1FaceMouseEntered
        playAudio(player1FaceInt);
    }//GEN-LAST:event_player1FaceMouseEntered

    //Plays audio when mouse enters P2FaceIcon
    private void player2FaceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_player2FaceMouseEntered
        // TODO add your handling code here:
        playAudio(player2FaceInt);
    }//GEN-LAST:event_player2FaceMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FinalProject().setVisible(true);
            }
        });
    }
    
    //Plays the audio when user hovers over the face icon
    public void playAudio(int playerFaceInt){
        //Setting the dir for the sound file
        String audioFile = "/images/";
        
        //Selecting the sound file based on the playerFactInt variables
        switch(playerFaceInt){
            case 0:
                audioFile += "neutral.wav";
                break;
            case 1:
                audioFile += "happy.wav";
                break;
            default:
                audioFile += "sad.wav";
                break;  
        }
        
        //Trying the sound file
        try
        {
            // get the sound file as a resource out of my jar file;
            InputStream inputStream = getClass().getResourceAsStream(audioFile);
            AudioStream audioStream = new AudioStream(inputStream);
            AudioPlayer.player.start(audioStream);
        }
        catch (Exception e)
        {   
        }
    }
    
    //What happens when a tie game occurs
    public void tieGame(){
        //Set icons to neutral faces, and set the FaceInts to 0 for audio
        player1Face.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/neutral-face.png")));
        player2Face.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/neutral-face.png")));
        player1FaceInt = 0;
        player2FaceInt = 0;
    }
    
    //What happens when player 1 wins
    public void player1Win(){
        //Sets p1Face icon to happy, p1FaceInt to 1
        //Sets p2Face icon to sad, p2FaceInt to 2
        //Adds 1 to p1WinTotal
        player1Face.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/happy-face.png")));
        player2Face.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sad-face.png")));
        player1WinTotal++;
        player1FaceInt = 1;
        player2FaceInt = 2;
    }
    
    //What happens when player 2 wins
    public void player2Win(){
        //Sets p1Face icon to sad, p1FaceInt to 2
        //Sets p2Face icon to happy, p2FaceInt to 1
        //Adds 1 to p2WinTotal
        player1Face.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sad-face.png")));
        player2Face.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/happy-face.png")));
        player2WinTotal++;
        player1FaceInt = 2;
        player2FaceInt = 1;
    }
    
    //Determines who is the winner
    public void determineWinner(int player1Choice){
        //Setting the player2Choice to a random number
        Random rng = new Random();
        player2Choice = rng.nextInt(3);
        
        //The switch statements for who wns
        switch(player1Choice){
            case 0: //User selects Rock
                switch(player2Choice){
                    case 0: //CPU selects Rock
                        tieGame();
                        output = "Tie game! Both players selected Rock!";
                        break;
                    case 1: //CPU selects Paper
                        player2Win();
                        output = "You lose! CPU selected Paper!";
                        break;
                    default: //CPU selects Scissors
                        player1Win();
                        output = "You win! CPU selected Scissors!";
                        break;
                }
                break;
            case 1: //User selects Paper
                switch(player2Choice){
                    case 0: //CPU selects Rock
                        player1Win();
                        output = "You win! CPU selected Rock!";
                        break;
                    case 1: //CPU selects Paper
                        tieGame();
                        output = "Tie game! Both players selected Paper!";
                        break;
                    default: //CPU selects Scissors   
                        player2Win();
                        output = "You lose! CPU selected Scissors!";
                        break;
                }
                break;
            default: //User selects Scissors
                switch(player2Choice){
                    case 0: //CPU selects Rock
                        player2Win();
                        output = "You lose! CPU selected Rock!";
                        break;
                    case 1: //CPU selects Paper
                        player1Win();
                        output = "You win! CPU selected Paper!";
                        break;
                    default: //CPU selects Scissors  
                        tieGame();
                        output = "Tie game! Both players selected Scissors!";
                        break;
                }
                break;
        }
        
        //Adds one to game played variable
        gameAmount++;
        
        //Setting the wins and gamesplayed labels
        player1Wins.setText(Integer.toString(player1WinTotal));
        player2Wins.setText(Integer.toString(player2WinTotal));
        gamesPlayed.setText(Integer.toString(gameAmount));
        
        //If infite games is selected
        if (gameAmountTotal == 0){
            //Set keep playing stuff to visible
            keepPlayingLabel.setVisible(true);
            yesKeepPlaying.setVisible(true);
            noKeepPlaying.setVisible(true);
            rockButton.setVisible(false);
            paperButton.setVisible(false);
            scissorsButton.setVisible(false);
            rockLabel.setVisible(false);
            paperLabel.setVisible(false);
            scissorsLabel.setVisible(false);
        }
        
        //If games played is not the same as games going to be played
        if (gameAmount != gameAmountTotal){
            //Tell the user to select again
            output += " Please select again!";
            outcomeOfGame.setText(this.output);
        }
        else{ //Else the user has played the final game
            finishGames(); //Sets buttons and labels to non visible, displays an output string
        }
       
    }
    
    //The fuction ran when a new set of games is started
    public void startGames(){
        //Sets buttons and labels to visible
        rockButton.setVisible(true);
        paperButton.setVisible(true);
        scissorsButton.setVisible(true);
        rockLabel.setVisible(true);
        paperLabel.setVisible(true);
        scissorsLabel.setVisible(true);
        outcomeOfGame.setVisible(true);
        outcomeOfGame.setText("Please select one!");
    }
    
    //The function that runs when a set of games end
    public void finishGames(){
        //Sets buttons and labels to non visible, displays an output string
        rockButton.setVisible(false);
        paperButton.setVisible(false);
        scissorsButton.setVisible(false);
        rockLabel.setVisible(false);
        paperLabel.setVisible(false);
        scissorsLabel.setVisible(false);
        keepPlayingLabel.setVisible(false);
        yesKeepPlaying.setVisible(false);
        noKeepPlaying.setVisible(false);
        output += " You won " + player1WinTotal + " out of " + gameAmount +" possible game(s)!";
        outcomeOfGame.setText(output);
    }

    //Variables
    private int gameAmountTotal = 0, //The total amount of games being played. Selected via the combobox with Infinite Games, 5 Games, 1 Game option
                gameAmount = 0, //The amount of games played yet
                player1WinTotal = 0, //The amount of wins for player1
                player2WinTotal = 0, //The amount of wins for player2
                player1Choice = 0, //The index of choice[] for player1
                player2Choice = 0, //The index of choice[] for player2
                player1FaceInt = 0, //0 for Neutral, 1 for Happy, 2 for Sad. Used to select sound clips to play
                player2FaceInt = 0; //0 for Neutral, 1 for Happy, 2 for Sad. Used to select sound clips to play
    private String output = ""; //String that will be displayed while the user is playing
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel gamesPlayed;
    private javax.swing.JLabel gamesPlayedLabel;
    private javax.swing.JLabel keepPlayingLabel;
    private javax.swing.JButton noKeepPlaying;
    private javax.swing.JComboBox numOfGames;
    private javax.swing.JLabel numOfGamesLabel;
    private javax.swing.JLabel outcomeOfGame;
    private javax.swing.JButton paperButton;
    private javax.swing.JLabel paperLabel;
    private javax.swing.JLabel player1Face;
    private javax.swing.JLabel player1Name;
    private javax.swing.JLabel player1Wins;
    private javax.swing.JLabel player2Face;
    private javax.swing.JLabel player2Name;
    private javax.swing.JLabel player2Wins;
    private javax.swing.JButton rockButton;
    private javax.swing.JLabel rockLabel;
    private javax.swing.JButton scissorsButton;
    private javax.swing.JLabel scissorsLabel;
    private javax.swing.JButton startPlaying;
    private javax.swing.JLabel wins;
    private javax.swing.JButton yesKeepPlaying;
    // End of variables declaration//GEN-END:variables
}
